#+TITLE: Using org to Blog with Jekyll
#+AUTHOR: Yu Zhao 赵宇
#+EMAIL: zyzy5730@163.com
#+LANGUAGE: zh_CN
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    hidestars

#+BEGIN_HTML
---
layout: page
title: 使用Emacs org-mode和Jekyll搭建git pages博客 (Using org to Blog with Jekyll)
categories: translation
tags: org jekyll
---
#+END_HTML

* 概述
  (本文由 http://orgmode.org/worg/org-tutorials/org-jekyll.html 翻译而来.)

  Jekyll 是一个以Ruby写成的静态网页站点生成器. 它可以实用模板语言, 将多种的文本标记转换成静态的html. 生成的站点不需要额外的组件(如php)就几乎可以在任何web服务器上运行. Jekyll 是用于生成 Github's pages 的工具.

  本文讨论了如何实用Jekyll和org生成静态站点和博客. 不需要为org文件写标记语言处理器, 我们依赖于org自带的html导出特性来生成可以被Jekyll处理的文件.

  Org已经有一个非常棒的html导出引擎. 但是, 它缺乏内建的blogging支持. 使用Jekyll也能够对你的站点的最终外观拥有更多的控制.

  使用org和Jekyll发布你的站点包含三个步骤:
  1. 使用org写你的页面内容
  2. 使用org导出你的页面到Jekyll项目目录
  3. 运行Jekyll以转换从org导出的html页面到你最终的站点

  默认情况下, Jekyll在其工作目录中的\under{}site目录生成其输出. 这是你的站点的自包含的版本, 可以被部署到你的web服务器上. 在\under{}site中的文件是完全子包含的, 所以你只需要复制它们到你的web服务器中. 可以通过ftp, rsync, 或者一个 git post 提交钩子. 你可以通过 \under{}config.yml 配置 Jekyll 将其发布的配置文件放到哪里.

  本质上, 我使用org来生成页面上的<body>标签之间的任何内容, 而使用Jekyll来生成(页面的)其余部分. 注意, 你可以很容易地将html内容嵌入到你的org页面中, 方法是使用 +BEGIN\under{}HTML 标签.
* 安装Jekyll
  如何安装请参阅Jekyll的[[https://github.com/jekyll/jekyll][网站]].
* 项目目录结构 Project Directory Structure
  Jekyll 预期有一个特定的目录结构. 在下面的例子中, 我的Jekyll项目在一个叫做jekyll的目录中. 博客文章在\under{}posts目录中, 而布局模板在\under{}layouts目录中. \under{}includes目录用于存放一些包含你想要在其他页面中包含的代码的文件, 如头(header)和侧边栏(sidebar).

  文件\under{}config.yml是一个包含Jekyll对该站点的配置的YAML文件.

  除了\under{}posts目录之外, 你还可以创建其它目录, 来存放你的站点的(不同的)非博客部分.
  #+BEGIN_EXAMPLE
  '|myproject
  '|   |org
  '|      |_posts
  '|      |-- 2009-11-26-my-first-post.org
  '|   |index.org
  '|   |jekyll
  '|   -- _config.yml
  '|   -- _layouts
  '|      |-- default.html
  '|      `-- post.html
  '|   -- _posts
  '|      |-- 2009-11-26-my-first-post.html
  '|      
  '|   -- |_site
  '|   -- |_includes
  `    -- index.html
  #+END_EXAMPLE
  你应该设置你的org文件的目录结构来镜像你的Jekyll项目. 然后当你导出你的org文件为html的时候, 这些文件就会出现在你的Jekyll项目的正确的位置. 我通常将包含我的org文件的目录放到关于Jekyll项目目录附近(aout the Jekyll project directory)的目录中, 以确保Jekyll不会将我的.org文件认为是该项目的一部分.
* 配置org html导出 Configuring org html Export
  发布html的基础, 在worg的HTML发布教程中有详述. 我假设你已经有了关于如何设置以发布org的基础. 默认情况下, org生成完整的web网页. 但是, 当我使用Jekyll的时候, 我真正关系的仅仅是<body>标签之间的部分. 而Jekyll生成其余的部分. org中的大多数东西都是可配置的, 也可以告诉org仅导出<body>标签之间的页面部分. 这是我的.emacs文件的相关部分.
  #+BEGIN_SRC emacs-lisp
    (setq org-publish-project-alist
	  '(
    
      ("org-ianbarton"
	      ;; Path to your org files.
	      :base-directory "~/devel/ianbarton/org/"
	      :base-extension "org"
    
	      ;; Path to your Jekyll project.
	      :publishing-directory "~/devel/ianbarton/jekyll/"
	      :recursive t
	      :publishing-function org-publish-org-to-html
	      :headline-levels 4 
	      :html-extension "html"
	      :body-only t ;; Only export section between <body> </body>
	)
    
    
	("org-static-ian"
	      :base-directory "~/devel/ianbarton/org/"
	      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	      :publishing-directory "~/devel/ianbarton/"
	      :recursive t
	      :publishing-function org-publish-attachment)
    
	("ian" :components ("org-ianbarton" "org-static-ian"))
    
    ))
  #+END_SRC
  这样一来, 我只需要运行 C-c e X ian 就可以导出我的站点.

  你需要设置你的导出文件的目的地为你的Jekyll项目目录. 假设你已经设置了你的org目录结构来镜像你的Jekyll项目, 则任何文件最终都应该在正确的位置了.
* 创建一个用于被Jekyll发布的org文件
  当你运行Jekyll的时候, 它会生成你的站点的源文件, and any files with YAML Front Matter are subject to special processing. 这个 Front Matter 被用于告诉Jekyll如何格式化你的页面.

  牢记: Jekyll不会处理你的.org文件, 而是处理(由org)导出的.html文件. 所以, 当谢org文件的时候, 就应该提前格式化好, 使得导出的html适合于Jekyll的处理.

  YAML Front Matter 必须是这个文件??的第一部分内容(the first thing), 在Front Matter Section之前不应该有空行. 一个典型的 Front Matter Section 可以是这样的:
  #+BEGIN_EXAMPLE
    ---
    layout: default
    title: My Page Title.
    ---
  #+END_EXAMPLE
  所以你应该确保任何的Front Matter规则出现在你的org文件的开头.

  注意, 三个连字符---是标记语言的一部分, 而且是必须的. 布局(layout)标签告诉Jekyll, 应该从它的\under{}layout目录中选择哪一个布局用于格式化你的页面. 你可以包含Front Matter Section的任何其他key, (例如, title:), 以用于你的页面. Front Matter 的更详细的细节请参阅 [[http://jekyllrb.com/docs/frontmatter/][Jekyll wiki]].

  下面是从我的org文件中抽取的一个简短的部分, 展示了我的设置:
  #+BEGIN_EXAMPLE
    ,#+STARTUP: showall indent
    ,#+STARTUP: hidestars
    ,#+BEGIN_HTML
    ---
    layout: default
    title: Benighted on the Ben.
    excerpt: An unplanned bivouac on Ben Nevis.
    ---
    ,#+END_HTML
  #+END_EXAMPLE
  记得那是一月初, 我们六个一起去旅行去了....

  Front Matter Section 被包在+BEGIN\under{}HTML中, 故, 会以原文导出到最终的html文件. 你可能需要更新你的org版本, 因为老的版本会在导出时, 在Front Matter Section之前生成两个空行. 你可以定义你自己的Front Matter keys, 并将其用于你生成的页面中. 在上面的例子中, 我使用了"excerpt"key来显示为一篇博客文章显示"teasers".

  注意, org当前的git版本移除了第一个"---", 如果目录包含文件名以一个下划线开始的文件. 变通方法是在你文件的开头两行都使用"---".??

  Carsten 也提供了两个钩子, 在导出完成的时候被运行, 这两个钩子也可以被用于整理输出:
  #+BEGIN_EXAMPLE
  org-export-html-final-hook (always)
  org-publish-after-export-hook (when going through org-publish)
  #+END_EXAMPLE
  一旦你已经将你的org项目导出为html了, 事情就仅仅是运行jekyll来生成最后的输出了. 默认情况下, Jekyll将其输出放到你的项目的\under{}site目录中, 但是你可以在\under{}config.yml文件中自定义.
* 使用Jekyll和Org写博客 Blogging with Jekyll and Org
  Jekyll有对于博客的内建支持. 任何你放到Jekyll项目的\under{}posts目录中的文件都被认为是博客文章. 但是, 你的博客文章的文件名必须遵守下面的格式:
  #+BEGIN_EXAMPLE
  yyyy-mm-dd-post\under{}name.html
  #+END_EXAMPLE
  要写一篇文章, 只需要在你的org/\under{}posts目录中创建一个有正确的文件名的新文件. 你可能发现Yasnippet对于在你的org文件中插入Front Matter和其他规则很有用. 当你写完之后, 你只需要运行 C-c e X project\under{}name 来将你的org项目导出为html, 然后运行jekyll来生成你的站点.

  你可以使用Jekyll的模板标记语言来决定你的博客文章如何显示. 在Jekyll站点页面上, 有许多站点, 而且带有源代码, 这样, 你就可以研究其他人如何使用标记创建他们的博客. 你也可以查看我的站点 http://www.ian-barton.com, 并在 http://github.com/geekinthesticks/ianbarton 查看源代码的快照.

  你可以给你的文章分配分类, 通过将文章放到某个文件夹之下, 如:
  #+BEGIN_EXAMPLE
  \under{}posts/org/jekyll/howto.html
  #+END_EXAMPLE
  这会将你的文章分配到org和jekyll分类中.
  
  或者通过在你的org文件中使用YAML标记:
  #+BEGIN_EXAMPLE
    categories:
	- org
	- linux
  #+END_EXAMPLE
* 在首页显示博客文章 Showing Blog Posts on the Front Page
  大多数博客在其首页显示最新的文章. 下面的例子显示文章标题和五篇最新文章的摘录:
  #+BEGIN_EXAMPLE html
    <ul class="posts">
    {{ "{% for post in site.posts limit: 5 "}} %}
      <div class="post_info">
	<li>
		<a href="{{"{{ post.url "}}}}">{{"{{ post.title "}}}}</a>
		<span>({{"{{ post.date | date:"%Y-%m-%d" "}}}})</span>
	</li>
	</br> <em>{{"{{ post.excerpt "}}}} </em>
	</div>
      {{ "{% endfor "}} %}
    </ul>   
  #+end_example
* 创建归档页面 Creating Archive Pages
  你可能只想在你的首页显示有限数量的博客文章. 但是, 你也会想要让旧的文章也可以看到. 你可以使用下面的标记创建一个所有博客文章的简要的列表.
  #+begin_example html
    <ul>
      {{ "{% for post in site.posts "}} %}
      <li>
	<a href="{{"{{ post.url "}}}}" title="{{"{{ post.title "}}}}">
	  <span class="date">
	    <span class="day">{{"{{ post.date | date: '%d' "}}}}</span>
	    <span class="month"><abbr>{{"{{ post.date | date: '%b' "}}}}</abbr></span>
	    <span class="year">{{"{{ post.date | date: '%Y' "}}}}</span>
	  </span>
	  <span class="title">{{"{{ post.title "}}}}</span>
	</a>
      </li>
      {{ "{% endfor "}} %}
    </ul>
  #+end_example
* 插入图片 Inserting Image
  你可能会想要将一些图片插入到你的博客文章中. 我使用下面的方法:
  #+BEGIN_EXAMPLE html
    <img src ="/images/skiddaw.jpg"
    alt="John and Ella on Skiddaw" align="left" width="300" height="250"
    title="John and Ella on Skiddaw" class="img"</img>
  #+END_EXAMPLE
  注意, class属性指向你的css中用于处理图片标签风格的类(class). 我的css包含:
  #+BEGIN_EXAMPLE css
    img {
	margin: 15px;
	border: 1px solid blue;
    }
  #+END_EXAMPLE
  注意, 如果你想要在你的图片和文本之间有一些空间, 在你的css中使用padding可能不会起作用. 我使用margin, 会起到同样的效果.

  尽管这样起作用, 但不会显示你的图片的标题. 我决定使用 [[http://www.w3.org/Style/Examples/007/figures][这里]] 描述的方法. 下面是一个将图片浮动到文本的右边的例子.

  在你的.org文件中, 使用下面的html来嵌入图片:
  #+BEGIN_EXAMPLE html
    <div class="photofloatr">
      <p><img src="myphoto.jpg" width="300"
	height="150" alt="My Mug Shot"></p>
      <p>A photo of me</p>
    </div>
  #+END_EXAMPLE
  现在你需要添加一些样式表(CSS)信息:
  #+BEGIN_EXAMPLE css
    div.photofloatr {
	float: right;
	border: thin silver solid;
	margin: 0.5em;
	padding: 0.5em;
    }
    
    div.photofloatr p {
      text-align: center;
      font-style: italic;
      font-size: smaller;
      text-indent: 0;
    }
  #+END_EXAMPLE
  第三种方式(但我自己还没有试过), 是使用 jQuery EXIF 插件来从图片的 EXIF 数据中抽取标题, 并使用 Javascript 来显示标题. [[http://www.nihilogic.dk/labs/exif/][这里]] 给出了更多细节.
* 在Front Matter中使用文本标记
  默认情况下, 你的文件的 Front Matter 部分的文本不会被 Jekyll 的标记引擎处理. 但是, 你可以使用 Textilize 滤镜(filter) 来将你的 Front Matter 字符串转换成 HTML, 使用 textile 标记格式化.

  我使用这一点来格式化我的页面摘录(excerpts), 这也包含在我的org文件的 Front Matter 标记中. 故, 在我的站点中, 有:
  #+BEGIN_EXAMPLE html
    <li>
      <a href="{{"{{ post.url "}}}}">{{"{{ post.title "}}}}</a>
      <span>({{"{{ post.date | date:"%Y-%m-%d" "}}}})</span>
    </li>
    </br>
    <em>{{"{{ post.excerpt | textilize "}}}}</em>
  #+end_example
  (其中使用{{"和"}}来引用liquid语法中的开闭tag, 注意用法, 需要前后颠倒.)

  这允许我在我的页面摘录中使用textile标记, 我的页面摘录定义在我的页面的Front Matter Section中.
* Jekyll的版本控制 Version Control with Jekyll
  对Jekylly(项目)使用版本控制系统是合情合理的. 如果你遵循我建议的目录结构, 你可以在你的顶级目录中创建一个git仓库. 然后, 你可以创建一个 post-commit 脚本, 来运行 org html 导出, 然后运行 Jekyll 来生成你的站点.
* HappyBlogger 的 Jekyll 修改
  Bjørn Arild Mæland 对Jekyll作出了一些修改, 以提供一些org文件的预处理, 从而与Jekyll更好地整合. 你可以在 [[https://github.com/bmaland/happyblogger][github]] 上查看其源代码.
* Org-mode/Jekyll 用法的另一个例子 Another example of Org-mode/Jekyll usage
  [[http://orgmode.org/worg/org-contrib/babel/index.html][Org-babel]] 开发的在线文档被发布在 github 上, 使用了 Jekyll. The following code is used to publish one blog post for every subheading of the first to top-level headings of a org file which tracks Org-babel development. 结果可以在 [[http://eschulte.github.io/babel-dev/][这里]] 看到, 而创建这个站点的代码在 [[https://github.com/eschulte/babel-dev/][这里]] .
  #+BEGIN_SRC elisp
    (save-excursion
      ;; map over all tasks entries
      (let ((dev-file (expand-file-name
		       "development.org"
		       (file-name-directory (buffer-file-name))))
	    (posts-dir (expand-file-name
			"_posts"
			(file-name-directory (buffer-file-name))))
	    (yaml-front-matter '(("layout" . "default"))))
	;; go through both the tasks and bugs
	(mapc
	 (lambda (top-level)
	   (find-file dev-file)
	   (goto-char (point-min))
	   (outline-next-visible-heading 1)
	   (org-map-tree
	    (lambda ()
	      (let* ((props (org-entry-properties))
		     (todo (cdr (assoc "TODO" props)))
		     (time (cdr (assoc "TIMESTAMP_IA" props))))
		;; each task with a state and timestamp can be exported as a
		;; jekyll blog post
		(when (and todo time)
		  (message "time=%s" time)
		  (let* ((heading (org-get-heading))
			 (title (replace-regexp-in-string
				 "[:=\(\)\?]" ""
				 (replace-regexp-in-string
				  "[ \t]" "-" heading)))
			 (str-time (and (string-match "\\([[:digit:]\-]+\\) " time)
					(match-string 1 time)))
			 (to-file (format "%s-%s.html" str-time title))
			 (org-buffer (current-buffer))
			 (yaml-front-matter (cons (cons "title" heading) yaml-front-matter))
			 html)
		    (org-narrow-to-subtree)
		    (setq html (org-export-as-html nil nil nil 'string t nil))
		    (set-buffer org-buffer) (widen)
		    (with-temp-file (expand-file-name to-file posts-dir)
		      (when yaml-front-matter
			(insert "---\n")
			(mapc (lambda (pair) (insert (format "%s: %s\n" (car pair) (cdr pair))))
			      yaml-front-matter)
			(insert "---\n\n"))
		      (insert html))
		    (get-buffer org-buffer)))))))
	 '(1 2))))
  #+END_SRC
* org的其他博客解决方案 Other Blog Solutions for org
** Blorgit
   Blorgit使用org mode做标记语言, 并运行在 Sinatra 迷你框架上. 使用git来发博和维护是合情合理的.
** ikiwiki
   ikiwiki 是一个站点编译器, 以Perl写成. 在许多方面与Jekyll想死, 但是与版本控制系统有更紧密的整合. 它支持博客, 并且有许多插件.

   还有一个Manoj 写的 org mode 的插件, 允许你用 org 来写作博客, 并将它们转换成适合被 ikiwiki 处理的html.
